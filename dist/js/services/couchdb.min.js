"use strict";var CouchDBService=angular.module("CouchDBService",[]);CouchDBService.factory("CouchDB",["$http",function(e){var n="1.0.0",t={COLON:":",COUNT:"?count=",DESCENDING:"descending=true",DESIGN:"/_design/",ENDKEY:"endkey=",HTTP:"http://",INCLUDE_DOCS:"include_docs=true",KEY:"key=",LIMIT:"limit=",QUOTE:'"',REVISION:"?rev=",SKIP:"skip=",SLASH:"/",STARTKEY:"startkey=",UUIDS:"_uuids",VIEW:"/_view/"},o={baseUrl:null,database:"test_main",designDocument:"baseline",host:"localhost",port:"5984"},r={baseUrl:null,database:null,designDocument:null,host:null,port:null,serverUrl:null},i={docId:null,endKey:null,key:null,limit:0,revisionId:null,skip:0,startKey:null,view:null,descending:null,includeDocs:null},d={data:null,docId:null,method:null,revisionId:null},c=function(e,n){var t=e.indexOf("?");return t>-1?e.concat("&",n):e.concat("?",n)},l=function(n,t,o){return e({method:n,url:t,data:o}).success(function(e){return e}).error(function(e,n,t,o){var r;throw r="CouchDB.js, Method "+o.method,r=r+", Status "+n,r=r+", Url "+o.url,new Error(r)})},s=function(e){return encodeURIComponent(e).replace(/[!'()]/g,escape).replace(/\*/g,"%2A")},u=function(e){return a(e)+e.database},a=function(e){return t.HTTP.concat(e.host,t.COLON,e.port,t.SLASH)},I=function(e,n){if(n.designDocument)var o=u(e)+t.DESIGN+n.designDocument+t.VIEW+n.view;else{if(!e.designDocument)throw new Error(" Failed to form basic GET URL. A design document was expected.");var o=u(e)+t.DESIGN+e.designDocument+t.VIEW+n.view}if(n.descending&&(o=c(o,t.DESCENDING)),n.limit){var r=parseInt(n.limit);o=c(o,t.LIMIT+r)}if(n.skip){var r=parseInt(n.skip);o=c(o,t.SKIP+r)}return n.key?(o=c(o,t.KEY+s(t.QUOTE+n.key+t.QUOTE)),n.includeDocs&&(o=c(o,t.INCLUDE_DOCS)),o):(n.startKey&&(o=c(o,t.STARTKEY+s(t.QUOTE+n.startKey+t.QUOTE))),n.endKey&&(o=c(o,t.ENDKEY+s(t.QUOTE+n.endKey+t.QUOTE))),n.includeDocs&&(o=c(o,t.INCLUDE_DOCS)),o)},E=function(e,n){if(e.baseUrl){var o=e.baseUrl;return n.docId&&(o=o.concat(t.SLASH,n.docId)),o}throw new Error("Invalid baseUrl in Config object; Did you call the INIT method first? ")},v=function(e){r.designDocument=e.designDocument||o.designDocument,i.descending=e.descending||null,i.endKey=e.endKey||null,i.includeDocs=e.includeDocs||null,i.key=e.key||null,i.limit=e.limit||0,i.skip=e.skip||0,i.startKey=e.startKey||null,i.view=e.view||null},D=function(e){if(d.docId=e.docId||null,d.revId=e.revId||null,d.data=e.data||null,null===d.docId&&null===d.revId)return d.method="POST",!0;if(d.docId)return d.method="PUT",d.revisionId&&(d.data._rev=d.revisionId),!0;throw console.log("Write properties:",e),new Error("Invalid write properties object; couldn't determine PUT or POST verb.")};return{init:function(e,t){console.log("angular-couchdb.js, a simple clientside service,",n);var i=t||!1;return e&&"object"==typeof e?(r.host=e.host||o.host,r.port=e.port||o.port,r.database=e.database||o.database,r.designDocument=e.designDocument||o.designDocument):(r.host=o.host,r.port=o.port,r.database=o.database,r.designDocument=o.designDocument),r.serverUrl=a(r),r.baseUrl=u(r),1==i?l("PUT",r.baseUrl):void 0},read:function(e){var n;if(e&&"object"==typeof e)if(e.view)v(e),n=I(r,i);else{if(!e.docId)throw console.log("GET properties:",e),new Error(" READ method: a document id is required when no view name is passed.");n=u(r),n=n.concat(t.SLASH,e.docId),e.revisionId&&(n=n.concat(t.REVISION,e.revisionId))}else n=u(r);return l("GET",n)},save:function(e){var n,t,o;if(!e||"object"!=typeof e){console.log("WRITE properties:",e);var i="SAVE method: method called with invalid properties object";throw new Error(i)}return D(e),o=E(r,d),t=d.method,n=d.data,l(t,o,n)},remove:function(e){if(e.docId&&e.revisionId){var n=u(r);return n=n.concat(t.SLASH,e.docId,t.REVISION,e.revisionId),l("DELETE",n)}throw console.log("DELETE properties:",e),new Error("DELETE method: both a Document Id and Revision Id are required to delete. One is missing.")},uuid:function(e){var n=r.serverUrl.concat(t.UUIDS);return e>0&&(n=n.concat(t.COUNT,e)),l("GET",n)}}}]);